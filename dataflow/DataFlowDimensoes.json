{
	"name": "DataFlowDimensoes",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ItemPedidoLocacaoTransform",
						"type": "DatasetReference"
					},
					"name": "SourcePedidoLocacao"
				},
				{
					"dataset": {
						"referenceName": "ClienteTransform",
						"type": "DatasetReference"
					},
					"name": "SourceCliente"
				},
				{
					"dataset": {
						"referenceName": "CidadeTransform",
						"type": "DatasetReference"
					},
					"name": "SourceCidade"
				},
				{
					"dataset": {
						"referenceName": "EstadoTransform",
						"type": "DatasetReference"
					},
					"name": "SourceEstado"
				},
				{
					"dataset": {
						"referenceName": "CorTransform",
						"type": "DatasetReference"
					},
					"name": "SourceCor"
				},
				{
					"dataset": {
						"referenceName": "VeiculoTransform",
						"type": "DatasetReference"
					},
					"name": "SourceVeiculo"
				},
				{
					"dataset": {
						"referenceName": "TipoAutomovelTransform",
						"type": "DatasetReference"
					},
					"name": "SourceAutomovel"
				},
				{
					"dataset": {
						"referenceName": "ModeloTransform",
						"type": "DatasetReference"
					},
					"name": "SourceModelo"
				},
				{
					"dataset": {
						"referenceName": "CombustivelTransform",
						"type": "DatasetReference"
					},
					"name": "SourceCombustivel"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimTempoDW",
						"type": "DatasetReference"
					},
					"name": "SinkDimTempo"
				},
				{
					"dataset": {
						"referenceName": "DimClienteDW",
						"type": "DatasetReference"
					},
					"name": "SinkDimCliente"
				},
				{
					"dataset": {
						"referenceName": "DimLocalDW",
						"type": "DatasetReference"
					},
					"name": "SinkDimLocal"
				},
				{
					"dataset": {
						"referenceName": "DimVeiculoDW",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select2"
				},
				{
					"name": "surrogateKey2"
				},
				{
					"name": "JoinLocal"
				},
				{
					"name": "select3"
				},
				{
					"name": "surrogateKey3"
				},
				{
					"name": "JoinVeiculo"
				},
				{
					"name": "select4"
				},
				{
					"name": "JoinVeiculo2"
				},
				{
					"name": "select5"
				},
				{
					"name": "JoinVeiculo3"
				},
				{
					"name": "select6"
				},
				{
					"name": "JoinVeiculo4"
				},
				{
					"name": "select7"
				},
				{
					"name": "surrogateKey4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Nr_Pedido as integer,",
				"          Dt_Locacao as timestamp,",
				"          Cd_Cliente as integer,",
				"          Cd_Agencia as integer,",
				"          Qt_Dias as integer,",
				"          Vl_Total as decimal(38,18),",
				"          Status as string,",
				"          Dt_Retirada as timestamp,",
				"          Dt_Entrega as timestamp,",
				"          Cd_Func as integer,",
				"          Dt_Pagto as timestamp,",
				"          Cd_Age_Bco as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SourcePedidoLocacao",
				"source(output(",
				"          Cd_cliente as integer,",
				"          Nm_Cliente as string,",
				"          Cd_Tp_Cliente as integer,",
				"          Nr_Estrelas as integer,",
				"          Nr_Habilitacao as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SourceCliente",
				"source(output(",
				"          Cd_Cidade as integer,",
				"          Nm_Cidade as string,",
				"          Cd_Estado as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SourceCidade",
				"source(output(",
				"          Cd_Estado as integer,",
				"          Nm_Estado as string,",
				"          Sigla_Estado as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SourceEstado",
				"source(output(",
				"          cd_Cor as integer,",
				"          Desc_Cor as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SourceCor",
				"source(output(",
				"          Nr_Placa as string,",
				"          Cd_Proprietario as integer,",
				"          Nr_Chassis as string,",
				"          Status as string,",
				"          Km_Atual as integer,",
				"          Tp_Automovel as integer,",
				"          Tp_Combustivel as integer,",
				"          cd_Modelo as integer,",
				"          cd_cor as integer,",
				"          cd_grupo as integer,",
				"          Vl_Diaria as decimal(38,18)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SourceVeiculo",
				"source(output(",
				"          cd_Tp_Automovel as integer,",
				"          Nm_Tp_Automovel as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SourceAutomovel",
				"source(output(",
				"          cd_Modelo as integer,",
				"          Nm_Modelo as string,",
				"          cd_Fabricante as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SourceModelo",
				"source(output(",
				"          cd_Tp_Combustivel as integer,",
				"          Nm_Tp_Combustivelcol as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SourceCombustivel",
				"SourcePedidoLocacao select(mapColumn(",
				"          Dt_Locacao,",
				"          Dt_Retirada,",
				"          Dt_Entrega,",
				"          Dt_Pagto",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 keyGenerate(output(id_Tempo as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"SourceCliente select(mapColumn(",
				"          Nm_Cliente,",
				"          Nr_Estrelas",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 keyGenerate(output(id_Cliente as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"SourceCidade, SourceEstado join(SourceCidade@Cd_Estado == SourceEstado@Cd_Estado,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> JoinLocal",
				"JoinLocal select(mapColumn(",
				"          Nm_Cidade,",
				"          Nm_Estado,",
				"          Sigla_Estado",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 keyGenerate(output(id_local as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey3",
				"SourceVeiculo, SourceAutomovel join(Tp_Automovel == cd_Tp_Automovel,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> JoinVeiculo",
				"JoinVeiculo select(mapColumn(",
				"          Km_Atual,",
				"          Tp_Combustivel,",
				"          cd_Modelo,",
				"          cd_cor,",
				"          Vl_Diaria,",
				"          Nm_Tp_Automovel",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4, SourceCor join(select4@cd_cor == SourceCor@cd_Cor,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> JoinVeiculo2",
				"JoinVeiculo2 select(mapColumn(",
				"          Km_Atual,",
				"          Tp_Combustivel,",
				"          cd_Modelo,",
				"          Vl_Diaria,",
				"          TipoAutomovel = Nm_Tp_Automovel,",
				"          Cor = Desc_Cor",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5, SourceModelo join(select5@cd_Modelo == SourceModelo@cd_Modelo,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> JoinVeiculo3",
				"JoinVeiculo3 select(mapColumn(",
				"          Km_Atual,",
				"          Tp_Combustivel,",
				"          Vl_Diaria,",
				"          TipoAutomovel,",
				"          Cor,",
				"          Modelo = Nm_Modelo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"select6, SourceCombustivel join(Tp_Combustivel == cd_Tp_Combustivel,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> JoinVeiculo4",
				"JoinVeiculo4 select(mapColumn(",
				"          Km_Atual,",
				"          Vl_Diaria,",
				"          TipoAutomovel,",
				"          Cor,",
				"          Modelo,",
				"          Combustivel = Nm_Tp_Combustivelcol",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"select7 keyGenerate(output(id_Veiculo as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey4",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['DimTempo'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkDimTempo",
				"surrogateKey2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['DimCliente'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkDimCliente",
				"surrogateKey3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['DimLocal'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkDimLocal",
				"surrogateKey4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['DimVeiculo'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}